GopherCon India 2015 参加報告、Go Benchmark Competitionの紹介
RCOアドテク部 社外勉強会
15 Apr 2015

吉田 啓二
株式会社リクルートコミュニケーションズ
アドテクノロジーサービス開発部
yoshida_keiji@r.recruit.co.jp

* 自己紹介

* 業務内容 1/2
- 2014年7月に株式会社リクルートコミュニケーションズへ入社
- [[https://sankak.jp/][仕事を辞めずに他社の経営に参画できるサービス「サンカク」]]の企画・立ち上げ
.image 0415-gopherconindia2015/sankak.jpg _ 800

* 業務内容 2/2
- 2014年10月から株式会社リクルートライフスタイルへ出向
- [[http://www.hotpepper.jp/][ホットペッパーグルメ]]の拡張・改善に従事
.image 0415-gopherconindia2015/hpg.jpg _ 800

* Goの経験 1/3
- 2014年の年初からGoの使用を開始
- いくつかのGoのOSSへコントリビュート
.link http://martini.codegangsta.io/ Martini - Sinatra風Webフレームワーク
.link http://github.com/drone/drone Drone - CIサービス
- 2014年5月に開催された [[http://gocon.connpass.com/event/6370/][Go Conference 2014 spring]] にて、[[http://slides.yoss.si/gocon/martini.html][Martiniについて発表]]
.image 0415-gopherconindia2015/gocon2014spring.jpg _ 500

* Goの経験 2/3
- いくつかのパッケージを開発・管理
.link https://github.com/yosssi/ace Ace - Slim風HTMLテンプレートエンジン
.link https://github.com/yosssi/gcss GCSS - Sass風CSSプリプロセッサ
.link https://github.com/yosssi/gmq GMQ - MQTTクライアント
- 2015年2月にベンガルール（インド）で開催された [[http://www.gophercon.in/][GopherCon India 2015]] にて、[[http://talks.yoss.si/2015/0220-good-package.slide#1][上記のパッケージの開発・管理を通じて学んだことを発表]]
.image 0415-gopherconindia2015/gopherconindia2015.jpg _ 500

* Goの経験 3/3
- [[http://gobench.org/][Go Benchmark Competition]] という、Go言語のベンチマークテストの結果を参加者同士で競い合うサービスをリリース
.image 0415-gopherconindia2015/gobench.jpg _ 800

* GopherCon India 2015 参加報告

* GopherCon India の概要
- 今年から始まった、インドのベンガルールで行われるGoのカンファレンス
- Innovation And Technology Trust という団体が主催
- 2015年2月20, 21日の2日間に渡り、約30名のスピーカーが発表
- 様々な企業・サービスのエンジニアがスピーカーとして参加：[[https://www.datadoghq.com/][Datadog]], [[https://sourcegraph.com/][Sourcegraph]], [[https://keen.io/][Keen IO]], [[https://www.digitalocean.com/][DigitalOcean]], [[http://www.browserstack.com/][BrowserStack]] など
.image 0415-gopherconindia2015/opening.jpg _ 700

* （参考）2015年に開催される（された）大規模なGoのカンファレンス
.link https://fosdem.org/2015/ FOSDEM：2月、ブリュッセル
.link http://www.gophercon.in/ GopherCon India：2月、ベンガルール
.link http://gopherchina.org/ Gopher China：4月、上海
.link http://gocon.connpass.com/ GoCon：5月・11月？、東京
.link http://www.gophercon.com/ GopherCon：7月、デンバー
.link http://www.golanguk.com/ Golang UK Conference：8月、ロンドン
.link http://gothamgo.com/ GothamGo：10月、ニューヨーク
.link http://www.dotgo.eu/ dotGo：11月、パリ

* GopherCon India 2015 への参加経緯 1/2
- 2014年8月に当該カンファレンスを発見
- 「参加したいが、ただ発表を聞くだけのためにインドへ行くのは...」
- サイト上に「スピーカー募集」のバナーがあることに気づく
- 「試しに応募してみて、万一スピーカーとして選ばれたら参加しよう。」

* GopherCon India 2015 への参加経緯 2/2
- 2014年10月末にスピーカーとして選ばれたとの連絡が
- 吉田：「GopherCon India というインドのカンファレンスのスピーカーとして選ばれたので、来年2月、数日間お休み頂きます。」
- マネージャー：「出張扱いとして、費用を会社で負担しますよ。」
- 吉田：（業務に関係ないのに良いのだろうか...）

* GopherCon India 2015 発表内容

* 資料・動画
- [[https://github.com/gopherconindia/talks/tree/master/2015][発表資料一覧]]
- [[https://www.youtube.com/channel/UCa-OZB5VIMcdzgrXRM2U0Ww][発表動画一覧]]

* Evolution of a Gopher - Francesc Campoy Flores

* 概要
- Goの初心者から熟練者までの段階を4つに分けて定義し、各段階でどのようなことを行い、どのように成長すれば良いかを説明

* 各段階
- the newcomer：Go言語を使い始めたばかりで、基本的な文法を学習している
- the explorer：基本的な文法を理解して一連のプログラムを開発できる
- the builder：大規模プロジェクトでGoを問題解決の手段として実際に使用している
- the expert：Goの使い方だけではなく、設計思想や哲学を理解している

* the newcomerが行うべきこと
- チュートリアル、ワークショップでの学習
- 基本的な文法の理解（slice, map, function, type, method）
- 小規模なプロジェクトの作成
- リソース：Go tour、Go playground、ドキュメント、golang-nuts、slack、irc

* the explorerが犯しがちな過ち
- 他の言語の実装方法や慣例をGoへ当てはめようとしてしまう（reflectやunsafeパッケージを多用してしまう）
- サードパーティのライブラリに必要以上に頼ってしまう

* the explorerが行うべきこと
- Goでの実装方法や慣例を理解すること
- Goの標準ライブラリで何ができるかを理解すること
- [[http://gophergala.com/][Gopher Gala]] や [[http://golang-challenge.com/][Go Challenge]] などのハッカソン、コンテストへ参加すること

* the builderが行うべきこと
- Goを書き続け、Goで現実の問題を解決し続けること
- 既存のプロジェクトへコントリビュートすること：[[http://golang.org/][Go]]、[[https://www.docker.com/][Docker]]、[[http://kubernetes.io/][Kubernetes]]、[[https://github.com/golang/go/wiki/Projects][他]]
- コードレビューを行い、コーディングスタイルを統一させたり、ソフトウェアの品質を向上させたり、開発メンバのスキルを向上させたりすること

* the expertの姿
- Goの思想、哲学を熟知している
- 自分の知識をコミュニティへシェアし、名前が知れ渡っている：コードレビュー、メーリングリストで質問に答える

* Principles of designing Go APIs with channels - Alan Shreve

* 概要
- channelを扱うAPIを設計する際の原則を、Goの標準ライブラリをもとに説明

* APIは同期処理であるべきである
- APIを同期実行するか非同期で実行するかを、APIのユーザが選択できるようにするため（同期処理のAPIを容易に非同期で実行できる）
- Goの標準パッケージでは、channelを扱うAPIは全体の1%未満である：channelを扱わないAPIが約30,000本、channelを扱うAPIが約10本

* APIの引数・戻り値のchannelについては、データの方向を定義すべきである
  func After(d Duration) <-chan Time

  func Notify(c chan<- os.Signal, sig ...os.Signal)
- 正しくAPIが使用されているかをコンパイル時にチェックできるようにするため
- APIのデータフローとAPIの使い方をわかり易くするため

* channelを引数で受け取る vs channelを生成して返却する 1/2
  func Notify(c chan<- os.Signal, sig ...os.Signal)

vs

  func Notify(sig ...os.Signal) chan<- os.Signal

* channelを引数で受け取る vs channelを生成して返却する 2/2
- channelを引数で受け取るようにすることで、そのバッファサイズを呼び出し元で指定することができる
- また、同じchannelを後続の処理で使用することができる
.code 0415-gopherconindia2015/rcv_chan.go /START OMIT/,/END OMIT/
- 読み取り専用channelを返却することで、使用中のchannelがAPIの外側で意図せずしてクローズされるようなバグを、コンパイル時にチェックして防ぐことができる
.code 0415-gopherconindia2015/close_chan.go /START OMIT/,/END OMIT/

* channelを扱うAPIを定義すべき場合
- イベントの非同期通知：タイマーの発火、シグナルの受信、HTTP接続の切断など

* channel vs コールバック
  func ListenAndServe(addr string, handler Handler) error
- コールバックの方が、複雑な処理を簡単に書くことができる：コールバック関数の連鎖、パニックリカバリ
- channelの方が、処理フローがわかり易い
- channel：Go風、コールバック：JS風

* Tips for Creating a Good Package - Keiji Yoshida

* 概要
- 良いパッケージを作成するためのコツを紹介

* コーディングスタイル
- 以下に書かれているコーディングスタイルに従う必要がある
.link http://golang.org/doc/effective_go.html Effective Go - The Go Programming Language
.link https://github.com/golang/go/wiki/CodeReviewComments CodeReviewComments - go-wiki
- [[https://github.com/golang/lint][Golint]] を使うと、ソースコードが上記のコーディングスタイルに従っているか否かを機械的にチェックできる
- [[http://godoc.org/golang.org/x/tools/cmd/goimports][goimports]] を使うと、gofmtによるソースコードの整形に加えて、import文の構築（必要なパッケージの追加、不要なパッケージの除去）が自動的に行われる

* 拡張性・柔軟性
- 本当に公開する必要がある関数・メソッドのみを、公開すべきである
- structの埋め込みを活用することで、複数のstructに共通しているフィールド、メソッドを簡潔に定義できる
- API（公開関数・メソッド）は同期処理であるべきである
- APIの引数をinterfaceにすることで、そのAPIの使い勝手が大幅に良くなる
.code 0415-gopherconindia2015/compile_bef.go /START OMIT/,/END OMIT/
.code 0415-gopherconindia2015/compile_aft.go /START OMIT/,/END OMIT/

* テスト
- [[https://github.com/golang/go/wiki/TableDrivenTests][TableDrivenTests]] を用いることで、テストコードを簡潔で読みやすく、拡張しやすくできる
- GoのコードをテストできるCIサービス
Windows：[[https://ci.appveyor.com/][AppVeyor]]
Linux：[[http://wercker.com/][wercker]]、[[https://drone.io/][drone.io]]、[[https://travis-ci.org/][Travis CI]]、[[https://circleci.com/][CircleCI]]
テストカバレッジ測定：[[https://coveralls.io/][Coveralls]]、[[https://codecov.io/][Codecov]]

* Go Benchmark Competition の紹介

* 概要
- Go言語のベンチマークテストの結果を参加者同士で競い合うサービス
- [[http://gobench.org/][http://gobench.org/]]
- Slackでソースコードの提出、ベンチマーク結果の確認を行う
- ランキングはリアルタイムで集計され、公式ページに掲載される
.image 0415-gopherconindia2015/gobench-slack.jpg _ 600

* 動機
- 簡潔な書き方は大体理解した
- 次は、パフォーマンスの良いコードを書けるようになりたい
- 実践で身につけるのが一番の近道のようである...

* 社内の機械学習・アルゴリズム大会：チャットサービスの利用
- チャットサービスのボットへソースコードを提出し、結果が自動的に評価されるという方法が、簡単で参加しやすい
- チャットサービス上で、参加者同士のやり取りやナレッジの交換が行われやすい

* 社内の機械学習・アルゴリズム大会：競争
- 課題に取りかかるモチベーションを維持しやすい
- 妥協せずに考え抜くことで、飛躍的に成長できる

* 帰国後

* 部長との会話
- 部長：「他にも同じようなカンファレンスあるの？」
- 吉田：「アメリカやフランスでも大規模なGoのカンファレンスがあります。直近だと今年の7月にアメリカでありますね。」
- 部長：「全部行ってきて良いよ。」
- 吉田：（業務に関係ないのに良いのだろうか...）
